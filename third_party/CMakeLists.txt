find_package(EXPAT QUIET)
if(EXPAT_FOUND)
  set(LIBKML_EXPAT_INCLUDE_DIRS ${EXPAT_INCLUDE_DIRS} CACHE INTERNAL "")
  set(LIBKML_EXPAT_LIBRARY ${EXPAT_LIBRARY})
else()
  message(STATUS "Expat not found. We will use third_party/expat")
  add_subdirectory(expat)
  set(LIBKML_EXPAT_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/expat/src CACHE INTERNAL "")
  set(LIBKML_EXPAT_LIBRARY expat)
endif()

include_directories(${LIBKML_EXPAT_INCLUDE_DIRS})

find_package(ZLIB QUIET)
if(ZLIB_FOUND)
  set(LIBKML_ZLIB_INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS} CACHE INTERNAL "")
  set(LIBKML_ZLIB_LIBRARY ${ZLIB_LIBRARY})
else()
  message(STATUS "zlib not found.  We will use third_party/zlib")
  add_subdirectory(zlib)
  set(LIBKML_ZLIB_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/zlib/src CACHE INTERNAL "")
  set(LIBKML_ZLIB_LIBRARY zlib)
endif()

include_directories(${LIBKML_ZLIB_INCLUDE_DIRS})

find_package(URIPARSER QUIET)
if(URIPARSER_FOUND)
  set(LIBKML_URIPARSER_INCLUDE_DIRS ${URIPARSER_INCLUDE_DIR} CACHE INTERNAL "")
  set(LIBKML_URIPARSER_LIBRARY ${URIPARSER_LIBRARY})
else()  
  message(STATUS "UriParser not found. We will use third_party/uriparser")
  file(GLOB LIBKML_URIPARSER_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/uriparser/src/*.c)
  set(LIBKML_URIPARSER_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/uriparser/include CACHE INTERNAL "")
  add_library(kml_uriparser OBJECT ${LIBKML_URIPARSER_SOURCES})
  set(LIBKML_URIPARSER_LIBRARY "$<TARGET_OBJECTS:kml_uriparser>")
endif()

include_directories(${LIBKML_URIPARSER_INCLUDE_DIRS})
